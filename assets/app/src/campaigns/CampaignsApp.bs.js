// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Util$ReactTemplate = require("../Util.bs.js");
var SessionData$ReactTemplate = require("./sessions/SessionData.bs.js");
var CampaignListPage$ReactTemplate = require("./CampaignListPage.bs.js");
var SessionDetailPage$ReactTemplate = require("./sessions/SessionDetailPage.bs.js");
var CampaignDetailsPage$ReactTemplate = require("./CampaignDetailsPage.bs.js");
var SessionCreationPage$ReactTemplate = require("./sessions/SessionCreationPage.bs.js");
var CampaignCreationPage$ReactTemplate = require("./CampaignCreationPage.bs.js");

function reducer(action, state) {
  switch (action.tag | 0) {
    case 0 : 
        var route = action[0];
        if (typeof route === "number") {
          return /* Update */Block.__(0, [/* record */[
                      /* route */route,
                      /* sessionsByCampaign */state[/* sessionsByCampaign */1]
                    ]]);
        } else {
          switch (route.tag | 0) {
            case 0 : 
                var campaignId = route[0];
                return /* UpdateWithSideEffects */Block.__(2, [
                          /* record */[
                            /* route : ViewOneCampaign */Block.__(0, [campaignId]),
                            /* sessionsByCampaign */state[/* sessionsByCampaign */1]
                          ],
                          (function (self) {
                              return Curry._1(self[/* send */3], /* FetchSessions */Block.__(1, [campaignId]));
                            })
                        ]);
            case 1 : 
                var campaignId$1 = route[0];
                return /* UpdateWithSideEffects */Block.__(2, [
                          /* record */[
                            /* route : ViewOneSession */Block.__(1, [
                                campaignId$1,
                                route[1]
                              ]),
                            /* sessionsByCampaign */state[/* sessionsByCampaign */1]
                          ],
                          (function (self) {
                              return Curry._1(self[/* send */3], /* FetchSessions */Block.__(1, [campaignId$1]));
                            })
                        ]);
            default:
              return /* Update */Block.__(0, [/* record */[
                          /* route */route,
                          /* sessionsByCampaign */state[/* sessionsByCampaign */1]
                        ]]);
          }
        }
    case 1 : 
        var campaignId$2 = action[0];
        return /* SideEffects */Block.__(1, [(function (self) {
                      SessionData$ReactTemplate.getSessions(campaignId$2).then((function (sessions) {
                              Curry._1(self[/* send */3], /* FetchSessionsSuccess */Block.__(4, [
                                      campaignId$2,
                                      sessions
                                    ]));
                              return Promise.resolve(/* () */0);
                            }));
                      return /* () */0;
                    })]);
    case 2 : 
        var draftSession = action[0];
        return /* SideEffects */Block.__(1, [(function (self) {
                      SessionData$ReactTemplate.createSession(draftSession).then((function (session) {
                              return Promise.resolve(Curry._1(self[/* send */3], /* CreateSessionSuccess */Block.__(3, [session])));
                            }));
                      return /* () */0;
                    })]);
    case 3 : 
        var session = action[0];
        return /* UpdateWithSideEffects */Block.__(2, [
                  /* record */[
                    /* route */state[/* route */0],
                    /* sessionsByCampaign */Belt_MapInt.update(state[/* sessionsByCampaign */1], session[/* campaign_id */4], (function (sessions) {
                            if (sessions) {
                              return /* Some */[List.append(sessions[0], /* :: */[
                                            session,
                                            /* [] */0
                                          ])];
                            } else {
                              return /* None */0;
                            }
                          }))
                  ],
                  (function (self) {
                      return Curry._1(self[/* send */3], /* FetchSessions */Block.__(1, [session[/* campaign_id */4]]));
                    })
                ]);
    case 4 : 
        return /* Update */Block.__(0, [/* record */[
                    /* route */state[/* route */0],
                    /* sessionsByCampaign */Belt_MapInt.set(state[/* sessionsByCampaign */1], action[0], action[1])
                  ]]);
    
  }
}

function mapUrlToRoute(url) {
  var match = url[/* path */0];
  if (match && match[0] === "campaigns") {
    var match$1 = match[1];
    if (match$1) {
      var campaignId = match$1[0];
      var match$2 = match$1[1];
      if (match$2) {
        if (match$2[0] === "sessions") {
          var match$3 = match$2[1];
          if (match$3) {
            var sessionId = match$3[0];
            if (sessionId === "add") {
              if (match$3[1]) {
                return /* AddCampaign */2;
              } else {
                return /* AddSession */Block.__(2, [Caml_format.caml_int_of_string(campaignId)]);
              }
            } else if (match$3[1]) {
              return /* AddCampaign */2;
            } else {
              return /* ViewOneSession */Block.__(1, [
                        Caml_format.caml_int_of_string(campaignId),
                        Caml_format.caml_int_of_string(sessionId)
                      ]);
            }
          } else {
            return /* AddCampaign */2;
          }
        } else {
          return /* AddCampaign */2;
        }
      } else if (campaignId === "add") {
        return /* AddCampaign */2;
      } else {
        return /* ViewOneCampaign */Block.__(0, [Caml_format.caml_int_of_string(campaignId)]);
      }
    } else {
      return /* ListAllCampaigns */1;
    }
  } else {
    return /* AddCampaign */2;
  }
}

var component = ReasonReact.reducerComponent("CampaignsApp");

function make(campaigns, systems, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* ChangeRoute */Block.__(0, [mapUrlToRoute(ReasonReact.Router[/* dangerouslyGetInitialUrl */3](/* () */0))]));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var match = param[/* state */1];
              var sessionsByCampaign = match[/* sessionsByCampaign */1];
              var route = match[/* route */0];
              if (typeof route === "number") {
                switch (route) {
                  case 0 : 
                      return Util$ReactTemplate.s("Loading...");
                  case 1 : 
                      return ReasonReact.element(/* None */0, /* None */0, CampaignListPage$ReactTemplate.make(campaigns, systems, /* array */[]));
                  case 2 : 
                      return ReasonReact.element(/* None */0, /* None */0, CampaignCreationPage$ReactTemplate.make(systems, /* array */[]));
                  
                }
              } else {
                switch (route.tag | 0) {
                  case 0 : 
                      var id = route[0];
                      return ReasonReact.element(/* None */0, /* None */0, CampaignDetailsPage$ReactTemplate.make(Belt_MapInt.get(sessionsByCampaign, id), List.find((function (c) {
                                            return c[/* id */0] === id;
                                          }), campaigns), /* array */[]));
                  case 1 : 
                      var sessionId = route[1];
                      var campaignId = route[0];
                      var sessions = Belt_MapInt.get(sessionsByCampaign, campaignId);
                      if (sessions) {
                        return ReasonReact.element(/* None */0, /* None */0, SessionDetailPage$ReactTemplate.make(List.find((function (s) {
                                              return s[/* id */0] === sessionId;
                                            }), sessions[0]), List.find((function (c) {
                                              return c[/* id */0] === campaignId;
                                            }), campaigns), /* array */[]));
                      } else {
                        return Util$ReactTemplate.s("Loading...");
                      }
                  case 2 : 
                      var campaignId$1 = route[0];
                      return ReasonReact.element(/* None */0, /* None */0, SessionCreationPage$ReactTemplate.make(List.find((function (c) {
                                            return c[/* id */0] === campaignId$1;
                                          }), campaigns), /* array */[]));
                  
                }
              }
            }),
          /* initialState */(function () {
              return /* record */[
                      /* route : Loading */0,
                      /* sessionsByCampaign */Belt_MapInt.empty
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */reducer,
          /* subscriptions */(function (self) {
              return /* :: */[
                      /* Sub */[
                        (function () {
                            return ReasonReact.Router[/* watchUrl */1]((function (url) {
                                          return Curry._1(self[/* send */3], /* ChangeRoute */Block.__(0, [mapUrlToRoute(url)]));
                                        }));
                          }),
                        ReasonReact.Router[/* unwatchUrl */2]
                      ],
                      /* [] */0
                    ];
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.reducer = reducer;
exports.mapUrlToRoute = mapUrlToRoute;
exports.component = component;
exports.make = make;
/* component Not a pure module */
