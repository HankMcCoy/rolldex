// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

function getSystemMap(systems) {
  return Belt_MapInt.fromArray($$Array.map((function (system) {
                    return /* tuple */[
                            system[/* id */0],
                            system
                          ];
                  }), $$Array.of_list(systems)));
}

function getSystemFromMap(id, systemMap) {
  return Belt_MapInt.getExn(systemMap, id);
}

function decodeSystem(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.$$int, json),
          /* name */Json_decode.field("name", Json_decode.string, json),
          /* description */Json_decode.field("description", Json_decode.string, json)
        ];
}

function decodeSystems(json) {
  return Json_decode.list(decodeSystem, json);
}

function getSystems() {
  return fetch("/api/systems").then((function (prim) {
                  return prim.json();
                })).then((function (json) {
                return Promise.resolve(Json_decode.field("data", decodeSystems, json));
              }));
}

function createSystem(draftSystem) {
  var systemDict = { };
  systemDict["name"] = draftSystem[/* name */0];
  systemDict["description"] = draftSystem[/* description */1];
  var payload = { };
  payload["system"] = systemDict;
  return fetch("/api/systems", Fetch.RequestInit[/* make */0](/* Some */[/* Post */2], /* Some */[{
                          "Content-Type": "application/json"
                        }], /* Some */[JSON.stringify(payload)], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0)).then((function (prim) {
                  return prim.json();
                })).then((function (json) {
                return Promise.resolve(Json_decode.field("data", decodeSystem, json));
              }));
}

exports.getSystemMap = getSystemMap;
exports.getSystemFromMap = getSystemFromMap;
exports.decodeSystem = decodeSystem;
exports.decodeSystems = decodeSystems;
exports.getSystems = getSystems;
exports.createSystem = createSystem;
/* No side effect */
